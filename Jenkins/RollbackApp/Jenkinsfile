pipeline {
  agent {
    node {
      label 'master' 
    }
  }
  tools {
      oc 'oc'
  }
  options {
    timeout(time: 20, unit: 'MINUTES') 
  }
  stages {
    stage('Rollback App') {
        steps {
            script {
                openshift.withCluster(env.CLUSTER_NAME) {
                    openshift.withProject(env.PROJECT_NAME) {
						if(openshift.selector("deployment/${env.APP_NAME}").exists() && openshift.selector("svc/${env.APP_NAME}").exists()) {
                            if(openshift.selector("deployment/${env.APP_NAME}-${env.TAG_NAME}").exists() && openshift.selector("svc/${env.APP_NAME}-${env.TAG_NAME}").exists()) {
                                
                                // Sending all traffic to orgin app
                                openshift.set("route-backends", "${env.APP_NAME}", "${env.APP_NAME}=100%")

                                // Delete all apps except origin app
                                def appDeployments = openshift.selector("deployment").objects().collect{it.metadata.name}.findAll{it.startsWith("${env.APP_NAME}")}.collect {it}.sort()
                                appDeployments.each { obj -> 
                                    def deployment = openshift.selector("deployment/${obj}").object()
                                    if("${deployment.metadata.name}" == "${env.APP_NAME}"){
                                        return
                                    }
                                    openshift.selector("deployment/${obj}").delete( '--ignore-not-found' )
                                }

                                def appServices = openshift.selector("svc").objects().collect{it.metadata.name}.findAll{it.startsWith("${env.APP_NAME}")}.collect {it}.sort()
                                appServices.each { obj -> 
                                    def service = openshift.selector("svc/${obj}").object()
                                    if("${service.metadata.name}" == "${env.APP_NAME}"){
                                        return
                                    }
                                    openshift.selector("svc/${obj}").delete( '--ignore-not-found' )
                                }
                               
                            } else {
                                // Delete all apps
                                openshift.selector("deployment/${env.APP_NAME}").delete( '--ignore-not-found' )
                                openshift.selector("svc/${env.APP_NAME}").delete( '--ignore-not-found' )
                                openshift.selector("route/${env.APP_NAME}").delete( '--ignore-not-found' )
                            }
						}
                    }
                }
            }
        }
    }    
  }
}